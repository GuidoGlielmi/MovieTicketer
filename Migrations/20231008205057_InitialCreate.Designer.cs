// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieTicketer.Persistence.Entities;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MovieTicketer.Migrations
{
    [DbContext(typeof(MovieTicketerDbContext))]
    [Migration("20231008205057_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MovieStarrer", b =>
                {
                    b.Property<Guid>("MoviesId")
                        .HasColumnType("uuid")
                        .HasColumnName("movies_id");

                    b.Property<Guid>("StarrersId")
                        .HasColumnType("uuid")
                        .HasColumnName("starrers_id");

                    b.HasKey("MoviesId", "StarrersId")
                        .HasName("pk_movie_starrer");

                    b.HasIndex("StarrersId")
                        .HasDatabaseName("ix_movie_starrer_starrers_id");

                    b.ToTable("movie_starrer", (string)null);
                });

            modelBuilder.Entity("MovieTicketer.Persistence.Entities.Buyer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("dni");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.HasKey("Id")
                        .HasName("pk_buyer");

                    b.ToTable("buyer", (string)null);
                });

            modelBuilder.Entity("MovieTicketer.Persistence.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int[]>("Categories")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("categories");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<int>("Format")
                        .HasColumnType("integer")
                        .HasColumnName("format");

                    b.Property<int>("Rate")
                        .HasColumnType("integer")
                        .HasColumnName("rate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_movie");

                    b.ToTable("movie", (string)null);
                });

            modelBuilder.Entity("MovieTicketer.Persistence.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ColumnsAmount")
                        .HasColumnType("integer")
                        .HasColumnName("columns_amount");

                    b.Property<int>("RowsAmount")
                        .HasColumnType("integer")
                        .HasColumnName("rows_amount");

                    b.HasKey("Id")
                        .HasName("pk_room");

                    b.ToTable("room", (string)null);
                });

            modelBuilder.Entity("MovieTicketer.Persistence.Entities.Show", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsPremiering")
                        .HasColumnType("boolean")
                        .HasColumnName("is_premiering");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid")
                        .HasColumnName("movie_id");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("room_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.HasKey("Id")
                        .HasName("pk_show");

                    b.HasIndex("MovieId")
                        .HasDatabaseName("ix_show_movie_id");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("ix_show_room_id");

                    b.ToTable("show", (string)null);
                });

            modelBuilder.Entity("MovieTicketer.Persistence.Entities.Starrer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_starrer");

                    b.ToTable("starrer", (string)null);
                });

            modelBuilder.Entity("MovieTicketer.Persistence.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uuid")
                        .HasColumnName("buyer_id");

                    b.Property<int>("ColumnIdentifier")
                        .HasColumnType("integer")
                        .HasColumnName("column_identifier");

                    b.Property<char>("RowIdentifier")
                        .HasColumnType("character(1)")
                        .HasColumnName("row_identifier");

                    b.Property<Guid>("ShowId")
                        .HasColumnType("uuid")
                        .HasColumnName("show_id");

                    b.HasKey("Id")
                        .HasName("pk_ticket");

                    b.HasIndex("BuyerId")
                        .HasDatabaseName("ix_ticket_buyer_id");

                    b.HasIndex("ShowId")
                        .HasDatabaseName("ix_ticket_show_id");

                    b.ToTable("ticket", (string)null);
                });

            modelBuilder.Entity("MovieStarrer", b =>
                {
                    b.HasOne("MovieTicketer.Persistence.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_movie_starrer_movie_movies_id");

                    b.HasOne("MovieTicketer.Persistence.Entities.Starrer", null)
                        .WithMany()
                        .HasForeignKey("StarrersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_movie_starrer_starrer_starrers_id");
                });

            modelBuilder.Entity("MovieTicketer.Persistence.Entities.Show", b =>
                {
                    b.HasOne("MovieTicketer.Persistence.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_show_movie_movie_id");

                    b.HasOne("MovieTicketer.Persistence.Entities.Room", "Room")
                        .WithMany("Shows")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_show_room_room_id");

                    b.Navigation("Movie");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("MovieTicketer.Persistence.Entities.Ticket", b =>
                {
                    b.HasOne("MovieTicketer.Persistence.Entities.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticket_buyer_buyer_id");

                    b.HasOne("MovieTicketer.Persistence.Entities.Show", "Show")
                        .WithMany("Tickets")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticket_show_show_id");

                    b.Navigation("Buyer");

                    b.Navigation("Show");
                });

            modelBuilder.Entity("MovieTicketer.Persistence.Entities.Room", b =>
                {
                    b.Navigation("Shows");
                });

            modelBuilder.Entity("MovieTicketer.Persistence.Entities.Show", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
